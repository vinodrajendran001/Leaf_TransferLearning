
import pandas as pd
import os, cv2, random, re
import numpy as np
np.random.seed(100)

# data processing, CSV file I/O (e.g. pd.read_csv)
input1 = pd.read_csv('../leafclassification/train.csv')
parent_data = input1.copy() # for submission
input2 = pd.read_csv('../leafclassification/test.csv')
index = input2['id'] # for submission
targets = input1['species']
train_id = input1['id']
test_id = input2['id']
print len(targets)
print train_id[0]
print test_id[0]


# Formatting the images for CNN input using openCV

CHANNELS = 3
ROWS = 64
COLS = 64

TRAIN_DIR = 'images/'
train_images = [TRAIN_DIR+i for i in os.listdir(TRAIN_DIR)]
print len(train_images)

def read_image(file_path):
    img = cv2.imread(file_path, cv2.IMREAD_COLOR) #cv2.IMREAD_GRAYSCALE
    return cv2.resize(img, (ROWS, COLS), interpolation=cv2.INTER_CUBIC)

def prep_data(images,train):
    count = len(images)+1
    targets_id=[]
    data = np.ndarray((count, CHANNELS, ROWS, COLS), dtype=np.uint8)
    for i, image_file in enumerate(images):
        image = read_image(image_file)
        if train == 1:
            if int(re.findall('\d+', image_file)[0]) in train_id.values:
                data[int(re.findall('\d+', image_file)[0])] = image.T
                targets_id.append(int(re.findall('\d+', image_file)[0]))
                #print(int(re.findall('\d+', image_file)[0]))
        if train == 0:
            if int(re.findall('\d+', image_file)[0]) in test_id.values:
                data[int(re.findall('\d+', image_file)[0])] = image.T
        if i%250 == 0:
            print('Processed {} of {}'.format(i, count))
    if train == 1:
        return data,targets_id
    if train == 0:
        return data


train, targets_id = prep_data(train_images, 1)
test = prep_data(train_images, 0)

print("Train shape: {}".format(train.shape))
print("Test shape: {}".format(test.shape))

train_data = np.ndarray((len(train_id), 3, ROWS, COLS), dtype=np.uint8)
count = 0

for i in train_id:
    train_data[count] = train[i]
    count = count + 1
test_data = np.ndarray((len(test_id), 3, ROWS, COLS), dtype=np.uint8)
count = 0
for i in test_id:
    test_data[count] = test[i]
    count = count + 1

print("Train shape: {}".format(train_data.shape))
print("Test shape: {}".format(test_data.shape))

# converting target labels into categorical values

from sklearn.preprocessing import LabelEncoder
from keras.utils.np_utils import to_categorical

y_train = targets
y_train = LabelEncoder().fit(y_train).transform(y_train)
print(y_train.shape)
y_train_cat = to_categorical(y_train)
print(y_train_cat)
print train_data.shape

from keras.preprocessing.image import ImageDataGenerator
from keras.models import Sequential
from keras.layers import Convolution2D, MaxPooling2D
from keras.layers import Activation, Dropout, Flatten, Dense
from keras.callbacks import ModelCheckpoint, TensorBoard
from keras import backend as K

K.set_image_dim_ordering('th')

model = Sequential()
model.add(Convolution2D(32, 3, 3, input_shape=(3, ROWS, COLS)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))

model.add(Convolution2D(32, 3, 3))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))

model.add(Convolution2D(64, 3, 3))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))


model.add(Flatten())  # this converts our 3D feature maps to 1D feature vectors
model.add(Dense(64))
model.add(Activation('relu'))
model.add(Dropout(0.5))
model.add(Dense(99))
model.add(Activation('sigmoid'))


model.compile(loss='categorical_crossentropy',
              optimizer='adam',
              metrics=['accuracy'])

# model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

# this is the augmentation configuration we will use for training
train_datagen = ImageDataGenerator(
        rescale=1./255,
        shear_range=0.2,
        zoom_range=0.2,
        horizontal_flip=True)

train_datagen.fit(train_data)

checkpointer = ModelCheckpoint(filepath="weights_leaf1.h5", monitor='loss',
                               verbose=1, save_best_only=True)
# Fit the model on the batches generated by train_datagen.
model.fit_generator(train_datagen.flow(train_data, y_train_cat,
                    batch_size=32),
                    samples_per_epoch=train_data.shape[0],
                    nb_epoch=50, verbose=1,
                    callbacks=[TensorBoard(log_dir='leaf1'),checkpointer]
                    )


yPred = model.predict_proba(test_data)
yPred = pd.DataFrame(yPred,index=index, columns=sorted(parent_data.species.unique()))
fp = open('submission_nn_kernel_leaf1.csv','w')
fp.write(yPred.to_csv())

